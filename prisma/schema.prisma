// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// datasource y generator según tu configuración (en este ejemplo se usa PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUM para el tipo de producto (Core o No Core)
enum TipoProducto {
  CORE
  NO_CORE
}

// ENUM para indicar si el producto se vende por peso o por unidad
enum UnidadDeVenta {
  PESO
  UNIDAD
}

// ENUM para la presentación del producto
enum Presentacion {
  VIDRIO
  PLANTA
  EMPAQUETADO
}

// ENUM para la unidad de medida del producto
enum UnidadMedida {
  GR
  KG
  ML
  UNIDAD
}

// Modelo para las Marcas
model Marca {
  id         Int         @id @default(autoincrement())
  nombre     String
  productos  Producto[]
}

// Modelo para las Categorías
model Categoria {
  id         Int         @id @default(autoincrement())
  nombre     String
  productos  Producto[]
}

// Modelo para los Almacenes
model Almacen {
  id        Int        @id @default(autoincrement())
  nombre    String
  ubicacion String
  productos Producto[]
}

// Modelo para los Productores
model Productor {
  id        Int        @id @default(autoincrement())
  nombre    String
  ubicacion String
  productos Producto[]
}

// Modelo para los Productos
model Producto {
  id                 Int              @id @default(autoincrement())
  sku                String           @unique
  nombre             String
  precio             Float
  tipoProducto       TipoProducto
  unidadDeVenta      UnidadDeVenta
  presentacion       Presentacion?    // Vidrio, Planta o Empaquetado
  unidadMedida       UnidadMedida     // gr, kg, ml, unidad
  contenido          Float?           // p.ej. peso en Kg o la medida correspondiente
  stock              Int
  imagen             String?          // URL o path de la imagen del producto
  margenCommission   Float            // porcentaje de comisión para vendedores
  categoriaId        Int
  marcaId            Int
  createdById        String?
  almacenId          Int?
  productorId        Int?
  categoria          Categoria        @relation(fields: [categoriaId], references: [id])
  marca              Marca            @relation(fields: [marcaId], references: [id])
  createdBy          User?            @relation("CreatedBy", fields: [createdById], references: [id])
  almacen            Almacen?         @relation(fields: [almacenId], references: [id])
  productor          Productor?       @relation(fields: [productorId], references: [id])
  packProductos      PackProducto[]
  ventas             Venta[]
}

// Modelo para los Packs
model Pack {
  id              Int              @id @default(autoincrement())
  nombre          String
  precio          Float
  imagen          String?          // URL o path de la imagen del pack
  packProductos   PackProducto[]
  ventas          Venta[]
}

// Tabla intermedia para la relación many-to-many entre Packs y Productos
model PackProducto {
  packId      Int
  productoId  Int
  cantidad    Int?       // cantidad de este producto incluido en el pack
  pack        Pack       @relation(fields: [packId], references: [id])
  producto    Producto   @relation(fields: [productoId], references: [id])
  
  @@id([packId, productoId])
}

// Modelo para los Vendedores
model Vendedor {
  id           Int            @id @default(autoincrement())
  nombre       String
  ventas       Venta[]
  ventasCliente VentaCliente[]
}

// Modelo para registrar las ventas y, de esta forma, gestionar stock, totales y comisiones
model Venta {
  id           Int         @id @default(autoincrement())
  fecha        DateTime    @default(now())
  productoId   Int?        
  packId       Int?       // la venta puede corresponder a un producto o a un pack
  cantidad     Int
  precioTotal  Float      // venta total en soles
  comision     Float      // comisión total generada por la venta
  vendedorId   Int
  producto     Producto?  @relation(fields: [productoId], references: [id])
  pack         Pack?      @relation(fields: [packId], references: [id])
  vendedor     Vendedor   @relation(fields: [vendedorId], references: [id])
}

// Modelo para Rol del cliente
model RolCliente {
  id            Int       @id @default(autoincrement())
  nombre        String    @unique // Ej: Retail, Mayorista, etc.
  descuento     Float?    // Porcentaje de descuento
  limiteCredito Float?    // Máximo permitido
  clientes      Cliente[]
}

// Modelo para Clientes
model Cliente {
  id           Int            @id @default(autoincrement())
  nombre       String
  email        String         @unique
  telefono     String?
  password     String?
  direcciones  Direccion[]
  ventas       VentaCliente[]
  rolCliente   RolCliente     @relation(fields: [rolClienteId], references: [id])
  rolClienteId Int
  createdAt    DateTime       @default(now())
}

// Modelo para Distritos
model Distrito {
  id          Int         @id @default(autoincrement())
  nombre      String
  zona        String?
  direcciones Direccion[]
}

// Modelo para Direcciones
model Direccion {
  id          Int          @id @default(autoincrement())
  calle       String
  distrito    Distrito     @relation(fields: [distritoId], references: [id])
  distritoId  Int
  cliente     Cliente?     @relation(fields: [clienteId], references: [id])
  clienteId   Int?
  envios      Envio[]
  createdAt   DateTime     @default(now())
}

// Modelo para Métodos de Pago
model MetodoPago {
  id     Int            @id @default(autoincrement())
  nombre String
  ventas VentaCliente[]
}

// Modelo para Ventas a Clientes
model VentaCliente {
  id             Int         @id @default(autoincrement())
  cliente        Cliente     @relation(fields: [clienteId], references: [id])
  clienteId      Int
  vendedor       Vendedor    @relation(fields: [vendedorId], references: [id])
  vendedorId     Int
  total          Float
  metodoPago     MetodoPago  @relation(fields: [metodoPagoId], references: [id])
  metodoPagoId   Int
  envios         Envio[]
  fecha          DateTime    @default(now())
}

// Modelo para Envíos
model Envio {
  id           Int           @id @default(autoincrement())
  direccion    Direccion     @relation(fields: [direccionId], references: [id])
  direccionId  Int
  estado       String        @default("pendiente")
  venta        VentaCliente  @relation(fields: [ventaId], references: [id])
  ventaId      Int
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  products      Producto[]   @relation("CreatedBy")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
  VENDOR
  MARKETING
  INVENTORY
  FINANCE
}

// Modelo para las Preferencias del Cliente
model ClientePreferencias {
  id                    String    @id @default(cuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  
  // Información Básica del Cliente
  nombreCliente         String
  emailCliente          String
  telefonoCliente       String?
  empresa               String?
  cargo                 String?
  
  // Información del Negocio
  tipoNegocio           String?   // "productos_naturales", "ecommerce", "restaurante", "distribuidor"
  tamanioEmpresa        String?   // "pequena", "mediana", "grande"
  anosExperiencia       Int?      // Años en el negocio
  ubicacion             String?   // Ciudad/Región
  
  // Objetivos del Sitio Web
  objetivoPrincipal     String?   // "ventas_online", "mostrar_productos", "generar_leads", "branding"
  publicoObjetivo       String?   // "consumidores_finales", "mayoristas", "restaurantes", "todos"
  presupuestoAproximado String?   // "menos_5000", "5000_15000", "15000_30000", "mas_30000"
  
  // Preferencias de Diseño
  estiloVisual          String?   // "moderno", "tradicional", "minimalista", "colorido", "elegante"
  coloresPreferidos     String?   // JSON array de colores
  coloresEvitar         String?   // JSON array de colores a evitar
  fuentesPreferidas     String?   // JSON array de fuentes
  tonoComunicacion      String?   // "formal", "casual", "amigable", "profesional", "cercano"
  
  // Funcionalidades Deseadas
  necesitaEcommerce     Boolean   @default(false)
  necesitaCarrito       Boolean   @default(false)
  necesitaPagos         Boolean   @default(false)
  necesitaInventario    Boolean   @default(false)
  necesitaCRM           Boolean   @default(false)
  necesitaBlog          Boolean   @default(false)
  necesitaGaleria       Boolean   @default(false)
  necesitaTestimonios   Boolean   @default(false)
  necesitaChat          Boolean   @default(false)
  necesitaWhatsapp      Boolean   @default(false)
  necesitaEmail         Boolean   @default(false)
  necesitaAnalytics     Boolean   @default(false)
  necesitaSEO           Boolean   @default(false)
  necesitaMultiIdioma   Boolean   @default(false)
  necesitaResponsive    Boolean   @default(true)
  
  // Productos y Contenido
  cantidadProductos     Int?      // Número aproximado de productos
  categoriasProductos   String?   // JSON array de categorías
  necesitaCatalogo      Boolean   @default(false)
  necesitaFiltros       Boolean   @default(false)
  necesitaBusqueda      Boolean   @default(false)
  necesitaComparacion   Boolean   @default(false)
  necesitaWishlist      Boolean   @default(false)
  
  // Integraciones
  redesSociales         String?   // JSON array de redes sociales
  plataformasPago       String?   // JSON array de métodos de pago
  serviciosEnvio        String?   // JSON array de servicios de envío
  herramientasExistentes String?  // JSON array de herramientas actuales
  
  // Contenido Específico
  tieneLogo             Boolean   @default(false)
  tieneImagenes         Boolean   @default(false)
  tieneVideos           Boolean   @default(false)
  tieneContenido        Boolean   @default(false)
  necesitaFotografia    Boolean   @default(false)
  necesitaVideos        Boolean   @default(false)
  necesitaCopywriting   Boolean   @default(false)
  
  // SEO y Marketing
  palabrasClave         String?   // JSON array de palabras clave
  competidores          String?   // JSON array de competidores
  necesitaGoogleAds     Boolean   @default(false)
  necesitaFacebookAds   Boolean   @default(false)
  necesitaEmailMarketing Boolean  @default(false)
  necesitaRetargeting   Boolean   @default(false)
  
  // Técnico
  hostingPreferido      String?   // "vercel", "netlify", "aws", "otro"
  dominioTiene          Boolean   @default(false)
  dominioPreferido      String?
  necesitaSSL           Boolean   @default(true)
  necesitaBackup        Boolean   @default(false)
  necesitaMantenimiento Boolean  @default(false)
  
  // Plazos y Expectativas
  fechaLanzamiento      DateTime?
  urgencia              String?   // "baja", "media", "alta", "critica"
  prioridades           String?   // JSON array de prioridades
  restricciones         String?   // Texto libre de restricciones
  
  // Presupuesto Detallado
  presupuestoDiseno     String?   // "menos_2000", "2000_5000", "5000_10000", "mas_10000"
  presupuestoDesarrollo String?   // "menos_5000", "5000_15000", "15000_30000", "mas_30000"
  presupuestoMarketing  String?   // "menos_1000", "1000_3000", "3000_5000", "mas_5000"
  presupuestoMantenimiento String? // "menos_500", "500_1000", "1000_2000", "mas_2000"
  
  // Información Adicional
  comentariosAdicionales String?  @db.Text
  referencias            String?   // JSON array de sitios web de referencia
  funcionalidadesEspeciales String? @db.Text
  limitacionesTecnicas   String?   @db.Text
  
  // Estado del Formulario
  completado            Boolean   @default(false)
  fechaCompletado       DateTime?
  versionFormulario     String    @default("1.0")
}